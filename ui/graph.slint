import { MoveArea, MoveAreaLogic, Floating, FloatingSlots } from "graph/floating.slint";
import { Node } from "graph/nodes.slint";
import { Link, LinkSlots, LinkLogic } from "graph/links.slint";
import { Field, FieldType, Slot, NodeData, LinkData, FloatingState, FloatingLinkData, NodeLogic } from "graph/state.slint";

export {
    Field,
    FieldType,
    MoveAreaLogic,
    LinkLogic,
    NodeLogic,
    Slot,
    NodeData,
    LinkData,
    FloatingState,
    FloatingLinkData
}

export global GraphLogic {
    callback set_zoom(float);
    callback set_offset(float, float);
}

export component Graph inherits Rectangle {
    background: #111213;
    preferred-height: 100%;
    preferred-width: 100%;
    in-out property <float> zoom;
    in property <[NodeData]> nodes;
    in property <[LinkData]> links;
    in-out property <FloatingLinkData> floating;

    in property <float> original-offset-x;
    in property <float> original-offset-y;
    in-out property <float> offset-x;
    in-out property <float> offset-y;

    // catch mouse events in the background
    TouchArea {
        clicked => {
            if floating.floating_state != FloatingState.none {
                 MoveAreaLogic.reset_floating_state();
            }
        }
        moved => {
            if (self.pressed) {
                offset-x = original-offset-x + (self.mouse-x - self.pressed-x) / zoom /1px;
                offset-y = original-offset-y + (self.mouse-y - self.pressed-y) / zoom /1px;
            }
        }
        pointer-event(event) => {
            if event.kind == PointerEventKind.up {
                NodeLogic.focus_callback();
                GraphLogic.set_offset(
                    original-offset-x + (self.mouse-x - self.pressed-x) / zoom /1px,
                    original-offset-y + (self.mouse-y - self.pressed-y) / zoom /1px,
                );
            } 
        }
    }
    Flickable {
        interactive: false;
        viewport-height: 10000000cm;
        viewport-width: self.width;
        viewport-y: - (zoom - 1) * 20cm;
        viewport-x: 0;
        flicked => { 
            GraphLogic.set_zoom(1 - self.viewport-y/20cm);
            // debug(root.zoom);
        }
        Rectangle {}
    }

    if floating.floating_state != FloatingState.none: Floating {
        floating: floating;
        nodes: nodes;
        viewbox-height: self.height /1px;
        viewbox-width: self.width /1px;
        zoom: zoom;
        offset-x: offset-x;
        offset-y: offset-y;
    }

    for l[idx] in links : Link {
        link: l;
        nodes: nodes;
        viewbox-height: self.height /1px;
        viewbox-width: self.width /1px;
        zoom: zoom;
        offset-x: offset-x;
        offset-y: offset-y;
    }

    for n[node_idx] in nodes : Node {
        n: n;
        node_idx: node_idx;
        nodes: nodes;
        floating: floating;
        zoom: zoom;
        offset-x: offset-x;
        offset-y: offset-y;
    }

    if floating.floating_state != FloatingState.none: FloatingSlots {
        floating: floating;
        nodes: nodes;
        viewbox-height: self.height /1px;
        viewbox-width: self.width /1px;
        zoom: zoom;
        offset-x: offset-x;
        offset-y: offset-y;
    }

    for l[idx] in links : LinkSlots {
        link: l;
        nodes: nodes;
        zoom: zoom;
        offset-x: offset-x;
        offset-y: offset-y;
    }

    if floating.floating_state != FloatingState.none: MoveArea {
        floating: floating;
    }
}
