import { LineEdit } from "std-widgets.slint";

export struct Item {
    id: string,
    name: string,
    description: string,
    category: string,
}

export global PaletteSearch {
    callback add_node(string);
    callback search(string) -> [Item];
}

component Input inherits Rectangle {
    callback edited(string);
    callback enter();

    background: #191919;

    forward-focus: input;

    VerticalLayout {
        alignment: center;
        padding: 20px;
        padding-bottom: 10px;

        input := TextInput {
            color: white;
            font-size: 20px;
            single-line: true;

            edited() => {
                root.edited(self.text);
            }

            accepted() => {
                self.text = "";
                enter();
            }
        }
    }

    public function clear() {
        input.text = "";
    }
}

component ResultItemArrow inherits Rectangle {
    in property<brush> text-color;
    in property<brush> box-color;
    in property<brush> icon-color : #9c9c9c;

    HorizontalLayout {
        spacing: 10px;

        VerticalLayout {
            alignment: center;
            Text {
                color: text-color;
                text: "Add to Workflow";
                font-weight: 800;
            }
        }

        Image {
            width: 10pt; 
            source: @image-url("../assets/fa-arrow-right-solid.svg");
            image-fit: contain;
            colorize: icon-color;
        }
    }
}

component ResultItem inherits Rectangle {
    in property<Item> item;
    in property<brush> item-color;
    in property<bool> has-focus : false;

    property<brush> gradient : @radial-gradient(circle, #4248d7 80%, #4249D8.darker(4%) 100%);

    callback on-click(string);

    border-radius: 8px;

    VerticalLayout {
        alignment: center;

        padding-right: 10px;
        padding-left: 10px;

        HorizontalLayout {
            alignment: space-between;

            VerticalLayout {
                alignment: center;
                label := Text {
                    color: white;
                    text: item.name + " - " + item.category;
                }
            }

            ResultItemArrow {
                text-color: has-focus ? #fff : #545454;
                box-color: has-focus ? #fff : #212121;
                icon-color: has-focus ? #fff : #545454;
            }
        }
    }

    area := TouchArea {
        clicked() => {
            on-click(item.id);
        }
    }

    property<bool> has-hover <=> area.has-hover;

    function get-color(hover: bool) -> brush {
        if (self.has-focus) {
            return gradient;
        } else if (self.has-hover) {
            return item-color.brighter(20%);
        } else {
            return item-color;
        }
    }

    background: get-color(has-hover);
}

export component Palette inherits Rectangle {
    callback closed();

    property<[Item]> results : [];
    property<int> active-result : 0;

    width: 100%;
    height: 100%;

    forward-focus: input;

    public function toggle() {
        self.visible = !self.visible;
        self.visible ? input.focus() : closed();
    }

    public function hide() {
        self.visible = false;
        closed();
    }

    function wrappingAdd(idx: int) {
        active-result = mod((active-result + idx + results.length), results.length);
    }

    Rectangle {
        width: parent.width - 3cm;
        height: parent.height - 3cm;

        border-color: #262625;
        border-width: 2px;
        border-radius: 20px;
        background: #1e1e1e;

        padding: 10px;

        FocusScope {
            key-pressed(event) => {
                if (event.text == Key.Tab && event.modifiers.shift) {
                    root.wrappingAdd(-1);
                    return EventResult.accept;
                }
                if (event.text == Key.Tab) {
                    root.wrappingAdd(1);
                    return EventResult.accept;
                }

                return EventResult.reject;
            }


            VerticalLayout {
                padding: 10px;

                input := Input {
                    height: 10%;
                    edited(query) => {
                        root.results = PaletteSearch.search(query);
                    }

                    enter() => {
                        if (results.length > 0) {
                            PaletteSearch.add_node(results[active-result].id);
                            results = [];
                        }
                        root.toggle();
                    }
                }
                Rectangle {
                    height: 10px;
                    background: white;
                    border-radius: 2px;
                }
                VerticalLayout {
                    padding: 10px;
                    spacing: 5px;

                    for result[idx] in results : ResultItem {
                        item-color: #191919;
                        item: result;
                        has-focus: idx == active-result;

                        on-click(id) => {
                            PaletteSearch.add_node(id);
                            results = [];
                            input.clear();
                            root.toggle();
                        }
                    }
                }
            }
        }
    }
}
