import { MoveArea, MoveAreaLogic, Floating, FloatingSlots } from "node_view/floating.slint";
import { NodeLogic,  Node } from "node_view/nodes.slint";
import { Link, LinkSlots, LinkLogic } from "node_view/links.slint";
import { Slot, NodeData, LinkData, FloatingState, FloatingLinkData } from "node_view/state.slint";

export {
    MoveAreaLogic,
    LinkLogic,
    NodeLogic,
    Slot,
    NodeData,
    LinkData,
    FloatingState,
    FloatingLinkData
}

export component Graph inherits Rectangle {
    background: #1f1f1f;
    preferred-height: 100%;
    preferred-width: 100%;
    in property <[NodeData]> nodes;
    in property <[LinkData]> links;
    in-out property <FloatingLinkData> floating;

    // catch mouse events in the background
     TouchArea {
        clicked => {
            if floating.floating_state != FloatingState.none {
                 MoveAreaLogic.reset_floating_state();
            }
        }
    }

    if floating.floating_state != FloatingState.none: Floating {
        floating: floating;
        nodes: nodes;
        viewbox-height: self.height /1px;
        viewbox-width: self.width /1px;
    }

    for l[idx] in links : Link {
        link: l;
        nodes: nodes;
        viewbox-height: self.height /1px;
        viewbox-width: self.width /1px;
    }

    for n[node_idx] in nodes : Node {
        n: n;
        node_idx: node_idx;
        nodes: nodes;
        floating: floating;
    }

    if floating.floating_state != FloatingState.none: FloatingSlots {
        floating: floating;
        nodes: nodes;
        viewbox-height: self.height /1px;
        viewbox-width: self.width /1px;
    }

    for l[idx] in links : LinkSlots {
        link: l;
        nodes: nodes;
    }

    if floating.floating_state != FloatingState.none: MoveArea {
        floating: floating;
    }
}
