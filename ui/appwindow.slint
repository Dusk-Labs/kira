enum LinkType { a, b }
struct LinkData {
    src: int,
    src_slot: int,
    dst: int,
    dst_slot: int,
    ty: LinkType,
    detached_src: bool,
    detached_dst: bool,
    detached_x: length,
    detached_y: length,
}

struct Node { 
    x: length,
    y: length,
    width: length,
    text: string,
    inputs: [LinkType],
    outputs: [LinkType],
}


component Link inherits Rectangle {
    in-out property <LinkData> link;
    in property <[Node]> nodes;
    in property <color> link_color;
    in property <float> viewbox-width;
    in property <float> viewbox-height;

    callback detached(LinkData);

    function srcX() -> float {
        if link.detached_src {
            return link.detached-x/1px;
        } else {
            return (nodes[link.src].x + nodes[link.src].width) / 1px;
        }
    }
    function srcY() -> float {
        if link.detached_src {
            return link.detached-y/1px;
        } else {
            return nodes[link.src].y / 1px + 15 * link.src_slot;
        }
    }
    function dstX() -> float {
        if link.detached_dst {
            return link.detached-x/1px;
        } else {
            return nodes[link.dst].x / 1px - 10;
        }
    }
    function dstY() -> float {
        if link.detached_dst {
            return link.detached-y/1px;
        } else {
            return nodes[link.dst].y / 1px + 15 * link.dst_slot;
        }
    }
    
    Path {
        stroke: link_color;
        viewbox-height: viewbox-height;
        viewbox-width: viewbox-width;
        stroke-width: 3px;

        MoveTo { x: srcX()+5; y: srcY()+5; }
        CubicTo { 
            control-1-x: srcX()+5 + 100;
            control-1-y: srcY()+5; 

            control-2-x: dstX()+5 - 100;
            control-2-y: dstY()+5; 
            x: dstX()+5;
            y: dstY()+5; 
        }
    }
    Rectangle {
        x: srcX()*1px;
        y: srcY()*1px;
        width: 10px;
        height: 10px;
        border-radius: 5px;
        background: in_touch.has-hover ? link_color.darker(1) : link_color;
        in_touch := TouchArea {
            init => {
                link.detached-x = srcX()*1px;
                link.detached-y = srcY()*1px;
            }
            moved => {
                if (self.pressed) {
                    link.detached-src = true;
                    link.detached-x += self.mouse-x - self.pressed-x;
                    link.detached-y += self.mouse-y - self.pressed-y;
                    detached(link);
                }
            }
        }
    }
    Rectangle {
        x: dstX()*1px;
        y: dstY()*1px;
        width: 10px;
        height: 10px;
        border-radius: 5px;
        background: out_touch.has-hover ? link_color.darker(1) : link_color;
        out_touch := TouchArea {
            init => {
                link.detached-x = dstX()*1px;
                link.detached-y = dstY()*1px;
            }
            moved => {
                if (self.pressed) {
                    link.detached-dst = true;
                    link.detached-x += self.mouse-x - self.pressed-x;
                    link.detached-y += self.mouse-y - self.pressed-y;
                    detached(link);
                }
            }
        }
    }
}

component Graph inherits Rectangle {
    background: #1f1f1f;
    preferred-height: 300px;
    preferred-width: 300px;
    in-out property <[Node]> nodes;
    in-out property <[LinkData]> links;

    function colorFromLinkType(ty: LinkType) -> color {
        if ty == LinkType.a {
            orange
        } else {
            lightblue
        }
    }

    for n[idx] in nodes: VerticalLayout {
        y: n.y;
        spacing: 5px;
        for input in n.inputs: Rectangle {
            x: n.x - 10px;
            width: 10px;
            height: 10px;
            border-color: colorFromLinkType(input);
            border-radius: 5px;
            border-width: 2px;
        }
    }
    for n[idx] in nodes: VerticalLayout {
        y: n.y;
        spacing: 5px;
        for output[idx] in n.outputs: Rectangle {
            x: n.x + n.width;
            width: 10px;
            height: 10px;
            border-color: colorFromLinkType(output);
            border-radius: 5px;
            border-width: 2px;
        }
    }

    for l[idx] in links : Link {
        link: l;
        nodes: nodes;
        link_color: colorFromLinkType(l.ty);
        viewbox-width: self.width /1px;
        viewbox-height: self.height /1px;

        detached(lnk) => {
            if lnk.detached-dst && lnk.detached-src {
                // TODO
            }
            links[idx] = lnk;
        }
    }

    for n[idx] in nodes : r:= Rectangle {
        x: n.x;
        y: n.y;
        background: gray;
        width: n.width;
        height: l.preferred-height;
        border-radius: 3px;
        l := HorizontalLayout {
            Text { text: n.text; wrap: TextWrap.word-wrap; }
            padding: 15px;
        }
        TouchArea {
            moved => {
                if (self.pressed) {
                    n.x += self.mouse-x - self.pressed-x;
                    n.y += self.mouse-y - self.pressed-y;
                    nodes[idx] = n;
                }
            }
            mouse-cursor: move;
        }
    }
}

export component AppWindow inherits Window {
    Graph {
        nodes: [
            { text: "Node1 Lorem ipsum dolor sit amet", x: 120px, y: 235px, width: 90px, inputs: [LinkType.a], outputs: [LinkType.b, LinkType.b]} ,
            { text: "Node2", x: 350px, y: 150px, width: 90px, outputs: [LinkType.a] } ,
            { text: "Node3", x: 300px, y: 350px, width: 90px, inputs: [LinkType.a, LinkType.b]} ,
        ];
        links: [
            {src: 1, src_slot: 0, dst: 2, dst_slot: 0, ty: LinkType.a },
            {src: 0, src_slot: 0, dst: 2, dst_slot: 1, ty: LinkType.b },
            {src: 0, src_slot: 1, dst: 2, dst_slot: 1, ty: LinkType.b },
        ];
    }
}
